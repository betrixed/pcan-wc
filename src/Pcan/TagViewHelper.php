<?php

namespace Pcan;

/**
 * Similar functions to Phalcon View Tag

 * 
 * @author Michael Rynn 
 */
use WC\Assets;
use Pcan\Models\MenuTree;

class TagViewHelper
{

    const FORMDIV = 'form-group row';

    static public function register($plate)
    {
        $plate->filter('date', __CLASS__ . '::date');
        $plate->filter('price', __CLASS__ . '::price');
        
        $plate->extend('wc:init', __CLASS__ . '::init');
        $plate->extend('f3:view', __CLASS__ . '::includeView');
        $plate->extend('f3:xcheck', __CLASS__ . '::xcheckToken');
        $plate->extend('f3:css-header', __CLASS__ . '::CssHeader');
        $plate->extend('f3:link', __CLASS__ . '::Link');
        $plate->extend('f3:js-footer', __CLASS__ . '::JsFooter');
        $plate->extend('f3:css-assets', __CLASS__ . '::CssAssets');
        $plate->extend('f3:js-assets', __CLASS__ . '::JsAssets');
        $plate->extend('hidden', __CLASS__ . '::hiddenField');
        $plate->extend('text-field', __CLASS__ . '::textPlain');
        $plate->extend('email', __CLASS__ . '::textEmail');
        $plate->extend('phone', __CLASS__ . '::textPhone');
        $plate->extend('datetime', __CLASS__ . '::textDatetime');
        $plate->extend('multiline', __CLASS__ . '::textMultiline');
        $plate->extend('select-menu', __CLASS__ . '::selectMenu');
        $plate->extend('pwd-field', __CLASS__ . '::pwdField');
        $plate->extend('submit-btn', __CLASS__ . '::submitBtn');
        $plate->extend('checkbox', __CLASS__ . '::checkBox');
        $plate->extend('link-to', __CLASS__ . '::linkTo');
        $plate->extend('dropdown-items', __CLASS__ . '::menuLinks');
        $plate->extend('captcha-submit', __CLASS__ . '::recaptcha');
        $plate->extend('flash', __CLASS__ . '::flash');
        $plate->extend('drop-down', __CLASS__ . '::dropDown');
    }

    /**
     * 
     * @param type $layout
     * @param type $view
     * @return type
     * 
     * Unfortunately there are interactions between 
     * "view" and "session" for flash messages.
     * Flash messages need to be transferred, and session updated,
     * before the "headers" get rendered and sent.
     * 
     * The convention adopted here, is that $view is a StdClass with arbitrary properties.
     * Flash messages, if they exist, will be stored, in its "flash" property,
     * and UserSession changes resolved prior to render.
     * Flash content is generated by arbitrary usage of flash -> array of (text, status)
     */
    static public function render($layout, $view = null)
    {
        $plate = \Template::instance();
        static::register($plate);
        // see if UserSession exists, and has flash messages
        if (!is_null($view) && \Registry::exists('UserSession')) {
            $us = \WC\UserSession::instance();
            $view->us = $us;
            $view->flash = $us->getMessages();
            $us->write(); // finalize session now
        }
        return $plate->render($layout);
    }

    static public function includeView($node) {
        $path = isset($node[0]) ? $node[0] : null;
        if (!empty($path)) {
            return \View::instance()->render($path);
        }
        else {
            return "<p>Missing View Name</p>";
        }
    }
    static public function &getAttr($node)
    {
        $plate = \Template::instance();
        $attr = $node['@attrib'];
        $name = null;
        $pset = [];
        foreach ($attr as $key => $val):
            $token = $plate->token($val);
            if (substr($val, 0, 2) == "{{") {
                $env0 = '<?=';
                $env1 = '?>';
            } else if (substr($val, 0, 2) == "{~") {
                $env0 = "<?php";
                $env1 = "?>";
            } else {
                $env0 = "";
                $env1 = "";
            }
            $pset[$key] = $env0 . $token . $env1;
        endforeach;
        return $pset;
    }

    static private function nodeAttr($node, $value = null)
    {   
        if (isset($node['@attrib'])) {
            // dependency on FatFree's method of View Template processing
            $pset = static::getAttr($node);
        }
        else {
            // Take what is given
            $pset = $node;
        }

        if (isset($pset['name'])):
            $pset['id'] = $pset['name'];
            if (!isset($pset['value'])):
                if (!empty($value)) {
                    $pset['value'] = $value;
                }
            endif;
        endif;
        return $pset;
    }

    static public function phpvar($val)
    {
        if (substr($val, 0, 3) === '<?=') {
            $val = substr($val, 3);
        }
        if (substr($val, -2) === '?>') {
            $val = substr($val, 0, -2);
        }
        return $val;
    }

    static public function buildSelect($node)
    {
        $pset = static::nodeAttr($node);
        $out = "";
        if (isset($pset['label'])) {
            $out .= static::label($id, $pset['label']);
        }
        if (isset($pset['list'])) {
            // value contains a php variable between <?= 
            $val = static::phpvar($pset['list']);
            $curval = isset($pset['value']) ? static::phpvar($pset['value']) : null;
            $out .= '<select ';

            if (isset($pset['name'])) {
                $out .= 'name="' . $pset['name'] . '" ';
            }
            if (isset($pset['id'])) {
                $out .= 'id="' . $pset['id'] . '" ';
            }
            $out .= '>' . PHP_EOL;
            $out .= '<?php  $curval = ' . $curval . ';' . PHP_EOL;
            $out .= ' foreach(' . $val . ' as $skey => $sval): ' . PHP_EOL;
            $out .= ' if (is_null( $curval )): ' . PHP_EOL . ' $curval = $skey; ' . PHP_EOL . ' endif;' . PHP_EOL;
            $out .= ' $selected = ($skey === $curval) ? " selected" : "";' . PHP_EOL;

            $text = '"<option value="' . ' . $skey . ' . ' " " . $selected . ">"' . ' . $sval . "</option>";';
            $out .= "echo $text" . PHP_EOL;
            $out .= "endforeach; ?>";
            $out .= '</select>' . PHP_EOL;
            return $out;
        }
    }

    static public function checkboxTag($node, $default)
    {
        $pset = static::nodeAttr($node, $value);
        $pset = array_merge($default, $pset);
        if (isset($pset['value'])):
            $value = $pset['value'];
        endif;
        $out = '<input';

        if (isset($pset['text'])) {
            $text = $pset['text'];
            unset($pset['text']);
        }
        else {
            $text = null;
        }
        foreach ($pset as $arg => $val):
            if (is_int($arg)) {
                $out .= ' ' . $val;
            } else if ($arg === 'checked') {
                $val = static::phpvar($val);
                $out .= '<?php echo (empty( ' . $val . ') || (' . $val . '=="0")) ? " " : " checked" ?>' . PHP_EOL;
            } else {
                $out .= ' ' . $arg . '="' . $val . '"';
            }
        endforeach;
        $out .= '>';
        if (!empty($text) ) {
            $out .= '&nbsp;&nbsp;' . $text;
        }
        return $out;
    }

    static public function generateTag($tag, $pset)
    {

        $out = '<' . $tag;
        foreach ($pset as $arg => $val):
            if (is_int($arg)) {
                $out .= ' ' . $val;
            } else {
                $out .= ' ' . $arg . '="' . $val . '"';
            }
        endforeach;
        $out .= '>';

        return $out;
    }

    static public function getTag($node, $default, $tag = 'input')
    {
        $pset = static::nodeAttr($node, $value);
        
        /* class is a multi value attribute */
        if (isset($default['class']) && isset($pset['class'])) {
            $tmp = $default['class'] . ' ' . $pset['class'];
            $default['class'] = $tmp;
            unset($pset['class']);
        }
        $pset = array_merge($default, $pset);

        $out = static::generateTag($tag, $pset) . PHP_EOL;

        return $out;
    }

    static public function submitBtn($node)
    {
        return static::getTag($node, ['type' => 'submit', 'value' => 'Submit']);
    }

    static public function textPlain($node)
    {
        $pset = static::nodeAttr($node);
        $id = $pset['id'];
        //$out = "<div class='" . static::FORMDIV . "'>" . PHP_EOL;
        if (isset($pset['label'])) {
            $out .= static::label($id, $pset['label']);
        }
        $out .= static::getTag($node, ['type' => 'text']) . PHP_EOL;
        //$out .= "</div>" . PHP_EOL;
        return $out;
    }

    static public function pwdField($node)
    {
        $pset = static::nodeAttr($node);
        $id = $pset['id'];
        //$out = "<div class='" . static::FORMDIV . "'>" . PHP_EOL;
        if (isset($pset['label'])) {
            $out .= static::label($id, $pset['label']);
        }
        $out .= static::getTag($node, ['type' => 'password']) . PHP_EOL;
        //$out .= "</div>" . PHP_EOL;
        return $out;
    }

    static public function linkTo($node)
    {
        $pset = static::nodeAttr($node);
        if (isset($pset['href'])):
            $href = $pset['href'];
            unset($pset['href']);
        else:
            $href = '#';
        endif;

        if (isset($pset['icon'])):
            $icon = $pset['icon'];
            unset($pset['icon']);
        else:
            $icon = null;
        endif;
        if (isset($pset['text'])):
            $text = $pset['text'];
            unset($pset['text']);
        else:
            $text = $href;
        endif;
        $out = '<a href="' . $href . '"';
        foreach ($pset as $arg => $val):
            $out .= ' ' . $arg . '="' . $val . '"';
        endforeach;
        $out .= '>';
        if (!empty($icon)) {
            $out .= "<i class='$icon' ></i> ";
        }
        $out .= $text . '</a>';
        return $out;
    }

    static public function hiddenField($node)
    {
        return static::getTag($node, ['type' => 'hidden']);
    }

    static public function checkBox($node)
    {
        return static::checkboxTag($node, ['type' => 'checkbox', 'value' => '1']);
    }

    static public function selectMenu($node)
    {
        return static::buildSelect($node);
    }

    static public function textArea($node)
    {
        return static::getTag($node, ['type' => 'textarea']);
    }

    static public function textDatetime($node)
    {
        $pset = static::nodeAttr($node);
        $id = $pset['id'];
        $dateid = 'pick' . $pset['id'];
        $out = "<div class='input-group date' id='$dateid' data-target='nearest'>" . PHP_EOL;

        if (isset($pset['label'])) {
            $label = $pset['label'];
            $out .= "<label for='$id'>" . $label . "</label>" . PHP_EOL;
        }
        $out .= static::getTag($node, ['type' => 'text',
                    'class' => "datetimepicker-input",
                    'data-target' => '#' . $dateid,
                    'size' => "15",
                    'maxlength' => "15"
        ]);
        $out .= PHP_EOL . "<div class=\"input-group-append\" data-target=\"#$dateid\" data-toggle=\"datetimepicker\">" . PHP_EOL;
        $out .= '<div class="input-group-text"><img src="/font/glyphicons_free/glyphicons/png/glyphicons-46-calendar.png"></div>' . PHP_EOL;
        $out .= "</div>" . PHP_EOL;
        $out .= "</div>" . PHP_EOL;
        $javaid = $id;
        if (strpos($javaid,'<?=') === 0) {
            $javaid = substr($id,3,strlen($id)-5 );
        }
        return $out;
    }

    static public function label($id, $text)
    {
        return "<label for='$id' class='col-form-label'>" . $text . "</label>" . PHP_EOL;
    }

    static public function textPhone($node)
    {
        $pset = static::nodeAttr($node);
        $id = $pset['id'];
        //$out = "<div class='" . static::FORMDIV . "'>" . PHP_EOL;
        if (isset($pset['label'])) {
            $out .= static::label($id, $pset['label']);
        }
        $out .= static::getTag($node, ['type' => 'tel']) . PHP_EOL;
        //$out .= "</div>" . PHP_EOL;
        return $out;
    }

    static public function textMultiline($node)
    {
        $pset = static::nodeAttr($node);
        $id = $pset['id'];
        //$out = "<div class='" . static::FORMDIV . "'>" . PHP_EOL;
        if (isset($pset['label'])) {
            $out .= static::label($id, $pset['label']);
        }
        if (isset($pset['value'])) {
            $value = $pset['value'];
            unset($pset['value']);
        } else {
            $value = '';
        }
        //$pset['class'] = 'form-control';
        $out .= static::generateTag('textarea', $pset) . $value . '</textarea>' . PHP_EOL;
        //$out .= "</div>" . PHP_EOL;
        return $out;
    }

    static public function textEmail($node)
    {
        $pset = static::nodeAttr($node);
        $id = $pset['id'];
        //$out = "<div class='" . static::FORMDIV . "'>" . PHP_EOL;
        if (isset($pset['label'])) {
            $out .= static::label($id, $pset['label']);
        }
        $out .= static::getTag($node, ['type' => 'email', 'aria-describedby' => 'emailHelp', 'placeHolder' => 'your@email.domain']);
        //$out .= "</div>" . PHP_EOL;
        return $out;
    }

 

    static public function menuLinks($node)
    {
        $pset = static::nodeAttr($node);
        $root = isset($pset['root']) ? $pset['root'] : null;
        $tree = MenuTree::getMenuSet($root);
        return MenuTree::generateSubMenu($pset, $tree);
    }

    static public function xcheckToken($node)
    {
        return static::getTag($node, ['name' => 'xcheck', 'type' => 'hidden']);
    }

    static public function init($node = null)
    {
        return '<?php ' . PHP_EOL .
                'Use WC\Assets; ' . PHP_EOL .
                'use WC\UserSession ?>';
    }

    static public function recaptcha($node)
    {
        $pset = static::nodeAttr($node);
        $text = $pset['text'];
        $id = $pset['id'];
        $site = $pset['site'];
        if (!empty($pset['class'])) {
            $class = $pset['class'];
        } else {
            $class = "btn btn-primary";
        }
        $out = <<<EOD
    <script>
        function cformSubmit(token) {
            document.getElementById("$id").submit();
        }
    </script>
    <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    <button class ="g-recaptcha $class" data-sitekey="$site" data-callback="cformSubmit">
        $text
    </button>
EOD;
        return $out;
    }

    static public function dropDown($node)
    {
        $pset = static::nodeAttr($node);
        $out = "<li class=\"nav-item dropdown\">" . PHP_EOL;
        $menuName = isset($pset['root']) ? $pset['root'] : -1;
        $mid = "dd_m" . $menuName;
        $out .= "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"$mid\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">";
        $title = isset($pset['title']) ? $pset['title'] : null;


        $out .= PHP_EOL . $title . PHP_EOL;
        $out .= "</a>" . PHP_EOL;
        $out .= "<div class=\"dropdown-menu\" aria-labelledby=\"$mid\">" . PHP_EOL;

        $tree = MenuTree::getMenuSet($menuName);
        $out .= MenuTree::generateSubMenu($pset, $tree);
        $out .= PHP_EOL . "</div>" . PHP_EOL;
        $out .= "</li>" . PHP_EOL;
        return $out;
    }

    static public function CssAssets($node)
    {
        $pset = static::nodeAttr($node);
        $name = $pset['name'];
        $out = "<?= Assets::instance()->CssPut(" . "\"$name\"" . "); ?>";
        return $out;
    }

    static public function Link($node)
    {
        return "<?= Assets::instance()->Link(); ?>";
    }

    static public function CssHeader($node)
    {
        return "<?= Assets::instance()->CssHeader(); ?>";
    }

    static public function JsFooter($node)
    {
        $name = $pset['name'];
        return "<?= Assets::instance()->JsFooter(); ?>";
    }

    static function price($value) {
         setlocale(LC_MONETARY, 'en_AU');
         $v = floatval($value);
        return money_format('%!10.2n', $v);
    }
    static function date($time, $format = 'Y-m-d')
    {
       
        if (!is_numeric($time))
            $time = strtotime($time); // convert string dates to unix timestamps
        return date($format, $time);
    }

    static function uriplus($uri, $plus)
    {
        
    }
}
